ARRAY, STATE & PROPES, COMPONENTS, CLASS, FUN, OBJ

Java Script
-----------
https://www.interviewbit.com/javascript-interview-questions/ - done
https://www.interviewbit.com/javascript-cheat-sheet/
https://quickref.me/javascript
https://www.interviewbit.com/javascript-mcq/
https://mindmajix.com/javascript-interview-questions - done
JavaScript Interview Questions & Answers - done
javascript-interview-questions-answers - done
Top JavaScript Interview Questions and Answers - done
https://www.fullstack.cafe/blog/javascript-interview-questions-and-answers - done
https://www.javatpoint.com/javascript-interview-questions - done
https://www.interviewbit.com/es6-interview-questions/
https://www.javatpoint.com/es6-interview-questions

JavaScript is an Object-Based language created by Netscape & Sun Microsystems in 1995
Object-oriented languages do not have the inbuilt objects whereas Object-based languages have the inbuilt objects, for example, JavaScript has Date object.

In contrast, JavaScript has no compilation step. Instead, an interpreter in the browser reads over the JavaScript code, interprets each line, and runs it. More modern browsers use a technology known as Just-In-Time (JIT) compilation, which compiles JavaScript to executable bytecode just as it is about to run.

Node.js:  Node is a JavaScript runtime environment, Compiler is used to compile your source code into something executable, But in order to execute, it needs runtime environment. Runtime environment gives your program ability to run, access to other resources such as OS, Networking

ES6 stands for ECMAScript 6. It is a version of JavaScript which was released in 2015. Hence, it is also called ES 2015.

Hoisting is the default behavior of JavaScript where all the variable and function declarations are moved on top. In simple words, we can say that Hoisting is a process in which, irrespective of where the variables and functions are declared, they are moved on top of the scope. The scope can be both local and global.

variable in JavaScript:
Var- The var statement declares a variable. Example - var b = 20; Declaration of variables should be done before the execution of code, the variable values can be reassigned before the execution of the code.
Const-const creates "constant" variables that cannot be reassigned another value.
let- let allows you to declare variables that are limited to the scope of a block statement.
Arrays are used to store multiple values in a single variable

Java Script -Similar- Type Script - Java Script XML (JSX) - CSS

DOM stands for Document Object Model.

Java Script Libraries
---------------------
Web Applications (React.js, Vue.js, AngularJS(discontinued), Bootstrap, jQuery)
Backend (Node.js, Express.js)
Desktop Applications (Electron.js)
Mobile Applications (React Native)

There are three ways to include JavaScript in HTML:
 Sandwich the JavaScript code by defining a pair <script></script> tags of HTML, whether you want to place it in the <head> or <body> section.
 Create an external JavaScript file to define <script src=”Script.js”></script> in HTML
 Directly code the JavaScript into HTML element

Array in JavaScript: var mobile = [“Oppo”, “ Samsung”, “Vivo”]

Objects in JavaScript: var std = { name: “ David”,  age: 16, id: 364 };

The function keyword in JS is used to execute the functions.
function in  JavaScript:
function function_name(){
//function body
}

The delete keyword is used to delete the property as well as its value.
Example:
var student= {age:20, batch:"ABC"};
delete student.age;

Properties are assigned to objects in the following way -
obj["class"] = 12;
or
obj.class = 12;

array slice() method removes the selected items from the array and formed as another new array. 
array splice() method removes the items of the selected array from the array and does not form another array.
confirm() -   Helps to get confirm dialog box including messages.
open() -   Helps to open the new window.
alert() -  This method displays the alert box with messages
close() -  Heps to close the window.
setTimeout() - This method helps to perform certain operations after a specified time like evaluating expressions and calling functions.

Following are three different ways to create an array in Javascript:
 By array literal
usage:
var myArray=[value1,value2…valueN];
 By creating instance of Array
usage:
var myArray=new Array();
 By using an Array constructor
usage:
var myArray=new Array(‘value1′,’value2′,…,’valueN’);

Var array  =  [ “1”, “2”, “3,'' “4” ];
We consider four methods to empty an array
1. array  = []
2. array.length = 0;
3. array.splice(0, array.length);
4. while (array.length)
{
array.pop();
}

The push method is used to add or append one or more elements to the end of an Array.
A value can be appended to an array in the given manner - arr[arr.length] = value;

// write hello world program in JS
● console.log()
console.log('Hello World');
● alert()
alert("Hello, World!");
● document.write()
document.write('Hello, World!');

Try… Catch---finally is used to handle exceptions in the JavaScript
Try{
Code
}
Catch(exp){
Code to throw an exception
}
Finally{
Code runs either it finishes successfully or after catch
}

We can add a property to an object with the help of object.property_name =value and delete object.property_name is used to delete a property.
Syntax:
 let user = new Object();
 // add a property
 user.name='John';
 user.age =21;
 document.write(user.age);
 delete user.age;
 document.write(user.age);
 
Data Types
----------
Primitive Data Types (Predefined - Number, String, Boolean, Null, Undefined)
Non-Primitive Data Types (User-defined - Object, Array)
Primitive data types can store only a single value. To store multiple and complex values, non-primitive data types are used.
Objects: Objects are variables too. But objects can contain many values. In JavaScript, an object is a standalone entity used to store collection of data, with properties and type.

classical Inheritance enables you to define a class that takes properties and characteristics from a parent class and allows you to add more

Prototype inheritance in javascript is the linking of prototypes of a parent object to a child object to share and utilize the properties of a parent class using a child class.

Difference between “ == “ and “ === “ operators.
------------------------------------------------
Both are comparison operators. The difference between both the operators is that “==” is used to compare values whereas, “ === “ is used to compare both values and types.

Example:

var x = 2;
var y = "2";
(x == y)  // Returns true since the value of both x and y is the same
(x === y) // Returns false since the typeof x is "number" and typeof y is "string"

In JavaScript, Make a zero division is not a bug

In Javascript, “use strict” is used to enforce the code in strict mode where we can’t use any variable without declaring it. 
“use strict” was not considered by earlier versions of Javascript.
example:
function myfunction()
{
“use strict";
var v = “This is a strict mode function";
}

React Native Fundamentals
-------------------------
React fundamentals such as Virtual DOM, component lifecycle, and component state.
React technologies such as React Native and Hooks.
REST APIs, document request models, offline storage, and third-party libraries.
Jest, Enzyme, ESLint, prop types, Flux, Flow, Redux, etc.
Redux Sagas for state management.

https://mindmajix.com/react-native-interview-questions - done
https://www.interviewbit.com/react-native-interview-questions/ - MCQs
https://www.interviewbit.com/react-interview-questions/ - 
https://www.interviewbit.com/react-mcq/ - 
React Native Interview Questions - done
Top 30 React Interview Questions and Answers - done
https://www.fullstack.cafe/blog/react-native-interview-questions - done
https://www.testgorilla.com/blog/react-native-interview-questions/ - done
https://www.javatpoint.com/react-native-interview-questions - done

React Native Class Components
-----------------------------
Class components are JavaScript ES2015 classes that extend a base class from React called Component

class App extends Component {
    render () {
        return (
            <Text>Hello World!</Text>
        )
    }
}
This gives the class App access to the React lifecycle methods like render as well state/props functionality from the parent.

Mounting: Constructor => GetDerivedStateFromProps => Render => Component

Updating: GetDerivedStateFromProps => Render => componentDidUpdate
shouldComponentUpdate: GetDerivedStateFromProps => shouldComponentUpdate

Unmounting: Constructor => GetDerivedStateFromProps => Render => componentWillUnmount => Component

React Native Functional Components
----------------------------------
Functional components are simpler. They don’t manage their own state or have access to the lifecycle methods provided by React Native. They are literally plain old JavaScript functions. They are also known as stateless components.

const PageOne = () => {
    return (
       <Text>Hello World!</Text>
    );
}

Hooks: State Hooks, Effect Hooks, Reducer Hooks, Contest Hooks, Bending Hooks, Hooks Api Reference
Hooks: State of methods to support Functional Components
State: Value of a variable
useState: Manage states in a Functional Component
useEffect: To run background Effect
useContest: Communication(share data) b/w 2 components

Class components are used as container components to handle state management and wrap child components. Functional components generally are just used for display purposes - these components call functions from parent components to handle user interactions or state updates.

Class: It's just an object that points to another object as its parent. That can point to another object and another and so on.
Function: Function is a way to package up some code so that it can be reused, while a class is a “blueprint” for an object, an entity that contains related code and data (methods and state).

Props : Short for properties, Props are immutable and used to pass data from one component to another. The other meaning of the props is properties.
state : is mutable. This means that state can be updated in the future while props can’t. we can initialize state in the constructor, and then call setState when we want to change it.
States are the source of data.

State - It allows components to create and manage their own data, this data can be changed in the future.
Props - It used to pass data from one component to another
Elements are immutable i,e once created cannot be changed. The state in a component is mutable. An element can be created using React. createElement( ) with type property. A component can be declared in different ways like it can be an element class with render() method or can be defined as a function.

React / ReactJs
ReactJS is an open-source JavaScript library used to build the user interface for Web Applications. It is responsible only for the view layer of the application. It provides developers to compose complex UIs from a small and isolated piece of code called "components." ReactJS made of two parts first is components, that are the pieces that contain HTML code and what you want to see in the user interface, and the second one is HTML document where all your components will be rendered.

Reactjs is a JavaScript library used for web development to create interactive interfaces and reusable UI components. It is mostly used as the “View” component of the Model View Controller (MVC) structure, which determines how the website or app looks and feels to your end-users.

Remember: React.js is commonly referred to as React or ReactJS. React.js is a JavaScript library to build a high functioning UI. It follows all of React’s syntax and principles, which is why it is easy to learn.

React Native
React Native is a framework for cross-platform mobile development, whereas React is a toolkit for creating web user interfaces and components.
React Native is an open-source JavaScript framework used for developing a mobile application for iOS Android, and Windows. It uses only JavaScript to build a cross-platform mobile app. React Native is same as React, but it uses native components instead of using web components as building blocks. It targets mobile platforms rather than the browser.

The language used in React Native is Java for Android applications and Objective-C/Swift for iOS apps.

React Native: UI software framework (software providing generic functionality)

Native applications are the applications of smartphones that are specifically designed for mobile operating system. For instance, Swift for iOS, Java and Kotlin for Android.

React Native uses native Application Program Interface (API) when rendering UI component.

Hybrid applications are the combination of both native applications and web applications. Hybrid apps run offline on the devices. Hybrid apps are written by using the web technologies like HTML5 and CSS.
Hybrid apps are developed to be used across all platforms, whereas native apps are developed for a particular platform. React Native is used for the development of hybrid apps. 
While hybrid apps are faster to develop and typically require less maintenance than native apps, they may perform slightly worse than their native counterparts.

WebView is a React Native is a component that is implemented to load a web page or web content.

Redux is a useful state management tool. Three components comprise Redux: actions, reducers and the store. It can be implemented by following these steps:

1.Install the necessary Redux packages online
2.Create a Redux folder at the root of the app
3.Within the Redux folder, add three files: actions.js, reducer.js, and store.js
4.In the new reducer.js file, import <combineReducers> from ‘redux’
5.In the store.js file, import <createStore> from ‘redux’ to create the store
6.Import the store to the React Native app

Redux: use one application state(variable) as a global state
--------------------------------------------------
Components
Actions
Reducers
Store
Middleware

UI->Actions->Constants->Reducer->Store->State(Redux)

create a reducer --> then create a store and --> then connect the React Native application to the Redux store.

Async Storage is the React Native equivalent of Local Storage from the web.
AsyncStorage is React Native’s key-value, unencrypted storage module that allows developers to store data for offline use. Typically, it’s used to store data when an app is not linked to a cloud service, or when specific features require data storage.

A memory leak occurs when memory that is no longer needed by an app remains in the app rather than being returned to the operating system. This is one of the most common causes of performance issues.
In theory, memory management is handled automatically by the garbage collector. However, this process is still prone to errors. Debugging tools can be used to identify memory leak issues. Some of the most common causes for issues are:

Timers and listeners in componentDidMount
Inline styles
Closure scope leaks
The use of console.log
Debugging can identify the root of the memory leak; once it has been removed, the issue should be resolved.

React Native provides many ways to handle screen sizes. Some of them are given below:

1. Flexbox: It is used to provide a consistent layout on different screen sizes. It has three main properties:

flexDirection
justifyContent
alignItems
2. Pixel Ratio: It is used to get access to the device pixel density by using the PixelRatio class. We will get a higher resolution image if we are on a high pixel density device.

3. Dimensions: It is used to handle different screen sizes and style the page precisely. It needs to write the code only once for working on any device.

4. AspectRatio: It is used to set the height or vice versa. The aspectRatio is present only in React-Native, not a CSS standard.

5. ScrollView: It is a scrolling container which contains multiple components and view. The scrollable items can be scroll both vertically and horizontally.

Do you need to render a list of similar items from an array or the data is very big? Use FlatList
Do you need to render generic content in a scrollable container and the data is small? Use ScrollView

ScrollView loads all data items on one screen for scrolling purposes. All the data is stored on RAM, which can cause performance issues for large amounts of data. 
FlatList only displays items that are currently shown on the screen (10 by default), thus sidestepping any performance issues.
Therefore, it is best to use FlatList for large datasets, whereas ScrollView can be used for smaller datasets.
FlatList in React Native is a component that displays the content in similarly structured data as a scrollable list.
It is used for large lists of data where the number of list items changes over time.

To accommodate different screen sizes, React Native offers Flexbox support.
To achieve the desired layout, flexbox offers three main properties − flexDirection, justifyContent and alignItems.

this.props.navigation.navigate() method is used to pass value between screen in React Native.
Syntax:
this.props.navigation.navigate('RouteName', { /* params go here */ })

React Native Networking
-----------------------
ActivityIndicator for data fetch (Retrieval of data)

Async Storage
-------------
Async Storage = App User Data

realm is an open-source object database management system.

Firebase: set of hosting services & realtime database management system.

React Native: Functional and Class Components
---------------------------------------------
Everything you see on screen is Component in React Native.

There are two main types of components in React Native — Functional and Class Components.

Functional Components
As the name suggests, Functional Components are simple JavaScript functions that can be arrow functions or written using function keyword.

Functional components are also called as Stateless component as they cannot manage their state or use lifecycle methods on their own. This becomes obvious that Functional components don’t have render() method.

Pure Functional components focus on rendering the UI rather than behaviour. They simply accept props and return valid JSX element.

import React from "react";
import { Text, View, StyleSheet } from "react-native";
const FunctionalComponent = () => {
  return (
    <View style={styles.container}>
      <Text style={styles.headerText}>Functional Component</Text>
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#806B33",
  },
  headerText: {
    color: "#ffffff",
    fontSize: 20,
  },
});
export default FunctionalComponent;

Class Components
Class components are JavaScript ES6 classes which are extended from a base class called React.Component.

Class components are referred as Stateful as they can manage state and have life cycle methods like constructor(), render() , componentDidMount(), etc.

When writing a Class Component, the only method we need to add is render() as other lifecycle methods are optional. Class components act as a container which can wrap child components into it.

import React from "react";
import { View, Text, StyleSheet } from "react-native";
class ClassComponent extends React.Component {
  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.headerText}>Class Component</Text>
      </View>
    );
  }
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#806B33",
  },
headerText: {
    color: "#ffffff",
    fontSize: 20,
  },
});
export default ClassComponent;

We are going to see one more React Feature in this article which is quite useful and relevant to Functional Component. Let’s have a quick introduction about Hooks!

Hooks
Hooks are functions that allow you to hook into React State and lifecycle features from functional component. Hooks don’t work with Class component.

Hooks were introduced in React 16.8. They allow us to use state and React features like lifecycle methods without modifying our existing functional component.

There are two basic rules to follow while using Hooks:

They should always be called at the Top Level of the component i.e. not within conditionals, loops or nested functions.
As I mentioned earlier, Hooks can be called from Functional components only.
Conclusion
Hopefully, this article helped you to get an overview of Functional and Class components in React native and idea about when to use which component while developing an application.